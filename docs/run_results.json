{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.8", "generated_at": "2024-02-29T18:22:04.843577Z", "invocation_id": "633734c5-973d-4b3e-ace8-0e4d32bb203a", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.307960Z", "completed_at": "2024-02-29T18:22:01.359312Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.359907Z", "completed_at": "2024-02-29T18:22:01.359931Z"}], "thread_id": "Thread-1", "execution_time": 0.058297157287597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`account_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__account_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.338243Z", "completed_at": "2024-02-29T18:22:01.360960Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.363014Z", "completed_at": "2024-02-29T18:22:01.363020Z"}], "thread_id": "Thread-2", "execution_time": 0.06058979034423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__balance_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`balance_transaction_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__balance_transaction_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.356112Z", "completed_at": "2024-02-29T18:22:01.361874Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.364725Z", "completed_at": "2024-02-29T18:22:01.364728Z"}], "thread_id": "Thread-4", "execution_time": 0.061646223068237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__charge_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`charge_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__charge_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.349406Z", "completed_at": "2024-02-29T18:22:01.362189Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.365002Z", "completed_at": "2024-02-29T18:22:01.365007Z"}], "thread_id": "Thread-3", "execution_time": 0.06354403495788574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__card_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`card_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__card_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.365297Z", "completed_at": "2024-02-29T18:22:01.370532Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.375278Z", "completed_at": "2024-02-29T18:22:01.375283Z"}], "thread_id": "Thread-1", "execution_time": 0.019803762435913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`customer_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__customer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.372048Z", "completed_at": "2024-02-29T18:22:01.382727Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.384665Z", "completed_at": "2024-02-29T18:22:01.384668Z"}], "thread_id": "Thread-2", "execution_time": 0.016216039657592773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__dispute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`dispute_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__dispute_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.375575Z", "completed_at": "2024-02-29T18:22:01.383284Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.385329Z", "completed_at": "2024-02-29T18:22:01.385331Z"}], "thread_id": "Thread-4", "execution_time": 0.018458843231201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__fee_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`fee_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__fee_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.378406Z", "completed_at": "2024-02-29T18:22:01.383745Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.386084Z", "completed_at": "2024-02-29T18:22:01.386088Z"}], "thread_id": "Thread-3", "execution_time": 0.018850088119506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_line_item_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`invoice_line_item_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice_line_item_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.386353Z", "completed_at": "2024-02-29T18:22:01.392147Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.399803Z", "completed_at": "2024-02-29T18:22:01.399809Z"}], "thread_id": "Thread-1", "execution_time": 0.019430875778198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`invoice_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.396692Z", "completed_at": "2024-02-29T18:22:01.453124Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.453881Z", "completed_at": "2024-02-29T18:22:01.453888Z"}], "thread_id": "Thread-4", "execution_time": 0.06268095970153809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_card_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`payment_method_card_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_method_card_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.393596Z", "completed_at": "2024-02-29T18:22:01.454763Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.459068Z", "completed_at": "2024-02-29T18:22:01.459072Z"}], "thread_id": "Thread-2", "execution_time": 0.06909680366516113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_intent_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`payment_intent_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_intent_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.400122Z", "completed_at": "2024-02-29T18:22:01.455367Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.459596Z", "completed_at": "2024-02-29T18:22:01.459600Z"}], "thread_id": "Thread-3", "execution_time": 0.07416605949401855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`payment_method_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_method_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.404871Z", "completed_at": "2024-02-29T18:22:01.470732Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.472816Z", "completed_at": "2024-02-29T18:22:01.472820Z"}], "thread_id": "Thread-1", "execution_time": 0.07777690887451172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`payout_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payout_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.460402Z", "completed_at": "2024-02-29T18:22:01.472336Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.482305Z", "completed_at": "2024-02-29T18:22:01.482309Z"}], "thread_id": "Thread-4", "execution_time": 0.024946212768554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__price_plan_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`price_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__price_plan_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.473093Z", "completed_at": "2024-02-29T18:22:01.484083Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.489075Z", "completed_at": "2024-02-29T18:22:01.489080Z"}], "thread_id": "Thread-2", "execution_time": 0.01903390884399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__refund_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`refund_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__refund_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.476089Z", "completed_at": "2024-02-29T18:22:01.484411Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.489383Z", "completed_at": "2024-02-29T18:22:01.489387Z"}], "thread_id": "Thread-3", "execution_time": 0.0191800594329834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__subscription_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`subscription_history_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__subscription_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.490994Z", "completed_at": "2024-02-29T18:22:01.492987Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.495359Z", "completed_at": "2024-02-29T18:22:01.495362Z"}], "thread_id": "Thread-4", "execution_time": 0.010838031768798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.486058Z", "completed_at": "2024-02-29T18:22:01.493826Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.496028Z", "completed_at": "2024-02-29T18:22:01.496031Z"}], "thread_id": "Thread-1", "execution_time": 0.016307830810546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__transfer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_source_testing`.`transfer_data`", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__transfer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.496840Z", "completed_at": "2024-02-29T18:22:01.498090Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.501765Z", "completed_at": "2024-02-29T18:22:01.501769Z"}], "thread_id": "Thread-2", "execution_time": 0.00877690315246582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.balance_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.498381Z", "completed_at": "2024-02-29T18:22:01.499468Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.502042Z", "completed_at": "2024-02-29T18:22:01.502045Z"}], "thread_id": "Thread-3", "execution_time": 0.008928060531616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.card_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.504238Z", "completed_at": "2024-02-29T18:22:01.505552Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.509805Z", "completed_at": "2024-02-29T18:22:01.509811Z"}], "thread_id": "Thread-4", "execution_time": 0.009958982467651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.charge_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.506767Z", "completed_at": "2024-02-29T18:22:01.507986Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.510652Z", "completed_at": "2024-02-29T18:22:01.510656Z"}], "thread_id": "Thread-1", "execution_time": 0.013739824295043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.credit_note_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.511573Z", "completed_at": "2024-02-29T18:22:01.513624Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.517870Z", "completed_at": "2024-02-29T18:22:01.517874Z"}], "thread_id": "Thread-2", "execution_time": 0.01068425178527832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.credit_note_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.514001Z", "completed_at": "2024-02-29T18:22:01.515382Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.518137Z", "completed_at": "2024-02-29T18:22:01.518140Z"}], "thread_id": "Thread-3", "execution_time": 0.010760068893432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.520241Z", "completed_at": "2024-02-29T18:22:01.521595Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.525612Z", "completed_at": "2024-02-29T18:22:01.525617Z"}], "thread_id": "Thread-4", "execution_time": 0.009389162063598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.dispute_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.522662Z", "completed_at": "2024-02-29T18:22:01.523930Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.526290Z", "completed_at": "2024-02-29T18:22:01.526292Z"}], "thread_id": "Thread-1", "execution_time": 0.012009143829345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.fee_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.527167Z", "completed_at": "2024-02-29T18:22:01.528463Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.532185Z", "completed_at": "2024-02-29T18:22:01.532193Z"}], "thread_id": "Thread-2", "execution_time": 0.009160995483398438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.528777Z", "completed_at": "2024-02-29T18:22:01.529924Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.532560Z", "completed_at": "2024-02-29T18:22:01.532563Z"}], "thread_id": "Thread-3", "execution_time": 0.009222030639648438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.invoice_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.534754Z", "completed_at": "2024-02-29T18:22:01.537025Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.540741Z", "completed_at": "2024-02-29T18:22:01.540745Z"}], "thread_id": "Thread-4", "execution_time": 0.010133028030395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.payment_intent_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.537981Z", "completed_at": "2024-02-29T18:22:01.539108Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.541400Z", "completed_at": "2024-02-29T18:22:01.541403Z"}], "thread_id": "Thread-1", "execution_time": 0.012188911437988281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.payment_method_card_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.542131Z", "completed_at": "2024-02-29T18:22:01.543239Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.546853Z", "completed_at": "2024-02-29T18:22:01.546864Z"}], "thread_id": "Thread-2", "execution_time": 0.008769035339355469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.payment_method_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.543509Z", "completed_at": "2024-02-29T18:22:01.544575Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.547293Z", "completed_at": "2024-02-29T18:22:01.547296Z"}], "thread_id": "Thread-3", "execution_time": 0.008932113647460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.payout_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.549667Z", "completed_at": "2024-02-29T18:22:01.551010Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.555290Z", "completed_at": "2024-02-29T18:22:01.555294Z"}], "thread_id": "Thread-4", "execution_time": 0.010084152221679688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.plan_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.551831Z", "completed_at": "2024-02-29T18:22:01.553803Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.556037Z", "completed_at": "2024-02-29T18:22:01.556040Z"}], "thread_id": "Thread-1", "execution_time": 0.012018918991088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.price_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.556781Z", "completed_at": "2024-02-29T18:22:01.557869Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.561293Z", "completed_at": "2024-02-29T18:22:01.561297Z"}], "thread_id": "Thread-2", "execution_time": 0.008461952209472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.refund_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.558130Z", "completed_at": "2024-02-29T18:22:01.559198Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.561611Z", "completed_at": "2024-02-29T18:22:01.561615Z"}], "thread_id": "Thread-3", "execution_time": 0.00855398178100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.subscription_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.563775Z", "completed_at": "2024-02-29T18:22:01.564942Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.568317Z", "completed_at": "2024-02-29T18:22:01.568321Z"}], "thread_id": "Thread-4", "execution_time": 0.008546113967895508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.subscription_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.565739Z", "completed_at": "2024-02-29T18:22:01.566829Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:01.568987Z", "completed_at": "2024-02-29T18:22:01.568990Z"}], "thread_id": "Thread-1", "execution_time": 0.015122175216674805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_source_integration_tests.transfer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.586036Z", "completed_at": "2024-02-29T18:22:02.214845Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:02.215443Z", "completed_at": "2024-02-29T18:22:02.215450Z"}], "thread_id": "Thread-1", "execution_time": 0.6363809108734131, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__card", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__card_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_1_check\n    \n as \n    \n    address_line_1_check\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    address_zip\n    \n as \n    \n    address_zip\n    \n, \n    \n    \n    address_zip_check\n    \n as \n    \n    address_zip_check\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    cvc_check\n    \n as \n    \n    cvc_check\n    \n, \n    \n    \n    dynamic_last_4\n    \n as \n    \n    dynamic_last_4\n    \n, \n    \n    \n    exp_month\n    \n as \n    \n    exp_month\n    \n, \n    \n    \n    exp_year\n    \n as \n    \n    exp_year\n    \n, \n    \n    \n    fingerprint\n    \n as \n    \n    fingerprint\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_4\n    \n as \n    \n    last_4\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    network\n    \n as \n    \n    network\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    tokenization_method\n    \n as \n    \n    tokenization_method\n    \n, \n    cast(null as string) as \n    \n    wallet_type\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        account_id,\n        address_city as card_address_city,\n        address_country as card_address_country,\n        address_line_1 as card_address_line_1,\n        address_line_2 as card_address_line_2,\n        address_state as card_address_state,\n        address_zip as card_address_postal_code,\n        wallet_type,\n        brand,\n        country,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        name as card_name,\n        recipient,\n        funding,\n        source_relation\n        \n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__card`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.569766Z", "completed_at": "2024-02-29T18:22:02.221339Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:02.221888Z", "completed_at": "2024-02-29T18:22:02.221892Z"}], "thread_id": "Thread-2", "execution_time": 0.6550960540771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__account", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__account_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    business_profile_name\n    \n as \n    \n    business_profile_name\n    \n, \n    \n    \n    business_profile_mcc\n    \n as \n    \n    business_profile_mcc\n    \n, \n    \n    \n    business_type\n    \n as \n    \n    business_type\n    \n, \n    \n    \n    charges_enabled\n    \n as \n    \n    charges_enabled\n    \n, \n    \n    \n    company_address_city\n    \n as \n    \n    company_address_city\n    \n, \n    \n    \n    company_address_country\n    \n as \n    \n    company_address_country\n    \n, \n    \n    \n    company_address_line_1\n    \n as \n    \n    company_address_line_1\n    \n, \n    \n    \n    company_address_line_2\n    \n as \n    \n    company_address_line_2\n    \n, \n    \n    \n    company_address_postal_code\n    \n as \n    \n    company_address_postal_code\n    \n, \n    \n    \n    company_address_state\n    \n as \n    \n    company_address_state\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    company_phone\n    \n as \n    \n    company_phone\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    default_currency\n    \n as \n    \n    default_currency\n    \n, \n    \n    \n    details_submitted\n    \n as \n    \n    details_submitted\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    payouts_enabled\n    \n as \n    \n    payouts_enabled\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        business_profile_mcc,\n        business_profile_name,\n        business_type,\n        charges_enabled,\n        company_address_city,\n        company_address_country,\n        company_address_line_1,\n        company_address_line_2,\n        company_address_postal_code,\n        company_address_state,\n        company_name,\n        company_phone,\n        country,\n        cast(created as timestamp) as created_at,\n        default_currency,\n        email,\n        is_deleted,\n        metadata,\n        payouts_enabled as is_payouts_enabled,\n        type as account_type,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__account`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.573970Z", "completed_at": "2024-02-29T18:22:02.227824Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:02.229044Z", "completed_at": "2024-02-29T18:22:02.229050Z"}], "thread_id": "Thread-3", "execution_time": 0.6618938446044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__balance_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__balance_transaction_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    available_on\n    \n as \n    \n    available_on\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    fee\n    \n as \n    \n    fee\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    net\n    \n as \n    \n    net\n    \n, \n    \n    \n    payout_id\n    \n as \n    \n    payout_id\n    \n, \n    \n    \n    reporting_category\n    \n as \n    \n    reporting_category\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n        cast(available_on as timestamp) as available_on,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        reporting_category,\n        source,\n        status,\n        type,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__balance_transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:01.580818Z", "completed_at": "2024-02-29T18:22:02.230291Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:02.231671Z", "completed_at": "2024-02-29T18:22:02.231675Z"}], "thread_id": "Thread-4", "execution_time": 0.6564691066741943, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__charge", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__charge_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_refunded\n    \n as \n    \n    amount_refunded\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    calculated_statement_descriptor\n    \n as \n    \n    calculated_statement_descriptor\n    \n, \n    \n    \n    captured\n    \n as \n    \n    captured\n    \n, \n    \n    \n    card_id\n    \n as \n    \n    card_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    fraud_details_stripe_report\n    \n as \n    \n    fraud_details_stripe_report\n    \n, \n    \n    \n    fraud_details_user_report\n    \n as \n    \n    fraud_details_user_report\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    outcome_network_status\n    \n as \n    \n    outcome_network_status\n    \n, \n    \n    \n    outcome_reason\n    \n as \n    \n    outcome_reason\n    \n, \n    \n    \n    outcome_risk_level\n    \n as \n    \n    outcome_risk_level\n    \n, \n    \n    \n    outcome_risk_score\n    \n as \n    \n    outcome_risk_score\n    \n, \n    \n    \n    outcome_seller_message\n    \n as \n    \n    outcome_seller_message\n    \n, \n    \n    \n    outcome_type\n    \n as \n    \n    outcome_type\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    cast(null as string) as \n    \n    payment_method_id\n    \n , \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    receipt_url\n    \n as \n    \n    receipt_url\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_transfer\n    \n as \n    \n    source_transfer\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    cast(null as string) as \n    \n    billing_detail_address_city\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_country\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_line1\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_line2\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_postal_code\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_state\n    \n , \n    cast(null as string) as \n    \n    billing_detail_email\n    \n , \n    cast(null as string) as \n    \n    billing_detail_name\n    \n , \n    cast(null as string) as \n    \n    billing_detail_phone\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        payment_method_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_carrier,\n        shipping_name,\n        shipping_phone,\n        shipping_tracking_number,\n        source_id,\n        source_transfer,\n        statement_descriptor,\n        invoice_id,\n        calculated_statement_descriptor,\n        billing_detail_address_city,\n        billing_detail_address_country,\n        billing_detail_address_line1,\n        billing_detail_address_line2,\n        billing_detail_address_postal_code,\n        billing_detail_address_state,\n        billing_detail_email,\n        billing_detail_name,\n        billing_detail_phone,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__charge`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:02.223619Z", "completed_at": "2024-02-29T18:22:02.937763Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:02.938788Z", "completed_at": "2024-02-29T18:22:02.938804Z"}], "thread_id": "Thread-2", "execution_time": 0.7166693210601807, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__dispute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__dispute_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction\n    \n as \n    \n    balance_transaction\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    evidence_access_activity_log\n    \n as \n    \n    evidence_access_activity_log\n    \n, \n    \n    \n    evidence_billing_address\n    \n as \n    \n    evidence_billing_address\n    \n, \n    \n    \n    evidence_cancellation_policy\n    \n as \n    \n    evidence_cancellation_policy\n    \n, \n    \n    \n    evidence_cancellation_policy_disclosure\n    \n as \n    \n    evidence_cancellation_policy_disclosure\n    \n, \n    \n    \n    evidence_cancellation_rebuttal\n    \n as \n    \n    evidence_cancellation_rebuttal\n    \n, \n    \n    \n    evidence_customer_communication\n    \n as \n    \n    evidence_customer_communication\n    \n, \n    \n    \n    evidence_customer_email_address\n    \n as \n    \n    evidence_customer_email_address\n    \n, \n    \n    \n    evidence_customer_name\n    \n as \n    \n    evidence_customer_name\n    \n, \n    \n    \n    evidence_customer_purchase_ip\n    \n as \n    \n    evidence_customer_purchase_ip\n    \n, \n    \n    \n    evidence_customer_signature\n    \n as \n    \n    evidence_customer_signature\n    \n, \n    \n    \n    evidence_details_due_by\n    \n as \n    \n    evidence_details_due_by\n    \n, \n    \n    \n    evidence_details_has_evidence\n    \n as \n    \n    evidence_details_has_evidence\n    \n, \n    \n    \n    evidence_details_past_due\n    \n as \n    \n    evidence_details_past_due\n    \n, \n    \n    \n    evidence_details_submission_count\n    \n as \n    \n    evidence_details_submission_count\n    \n, \n    \n    \n    evidence_duplicate_charge_documentation\n    \n as \n    \n    evidence_duplicate_charge_documentation\n    \n, \n    \n    \n    evidence_duplicate_charge_explanation\n    \n as \n    \n    evidence_duplicate_charge_explanation\n    \n, \n    \n    \n    evidence_duplicate_charge_id\n    \n as \n    \n    evidence_duplicate_charge_id\n    \n, \n    \n    \n    evidence_product_description\n    \n as \n    \n    evidence_product_description\n    \n, \n    \n    \n    evidence_receipt\n    \n as \n    \n    evidence_receipt\n    \n, \n    \n    \n    evidence_refund_policy\n    \n as \n    \n    evidence_refund_policy\n    \n, \n    \n    \n    evidence_refund_policy_disclosure\n    \n as \n    \n    evidence_refund_policy_disclosure\n    \n, \n    \n    \n    evidence_refund_refusal_explanation\n    \n as \n    \n    evidence_refund_refusal_explanation\n    \n, \n    \n    \n    evidence_service_date\n    \n as \n    \n    evidence_service_date\n    \n, \n    \n    \n    evidence_service_documentation\n    \n as \n    \n    evidence_service_documentation\n    \n, \n    \n    \n    evidence_shipping_address\n    \n as \n    \n    evidence_shipping_address\n    \n, \n    \n    \n    evidence_shipping_carrier\n    \n as \n    \n    evidence_shipping_carrier\n    \n, \n    \n    \n    evidence_shipping_date\n    \n as \n    \n    evidence_shipping_date\n    \n, \n    \n    \n    evidence_shipping_documentation\n    \n as \n    \n    evidence_shipping_documentation\n    \n, \n    \n    \n    evidence_shipping_tracking_number\n    \n as \n    \n    evidence_shipping_tracking_number\n    \n, \n    \n    \n    evidence_uncategorized_file\n    \n as \n    \n    evidence_uncategorized_file\n    \n, \n    \n    \n    evidence_uncategorized_text\n    \n as \n    \n    evidence_uncategorized_text\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_charge_refundable\n    \n as \n    \n    is_charge_refundable\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as dispute_id,\n        amount as dispute_amount,\n        balance_transaction,\n        charge_id,\n        connected_account_id,\n        cast(created as timestamp) as dispute_created_at,\n        currency as dispute_currency,\n        evidence_access_activity_log,\n        evidence_billing_address,\n        evidence_cancellation_policy,\n        evidence_cancellation_policy_disclosure,\n        evidence_cancellation_rebuttal,\n        evidence_customer_communication,\n        evidence_customer_email_address,\n        evidence_customer_name,\n        evidence_customer_purchase_ip,\n        evidence_customer_signature,\n        evidence_details_due_by,\n        evidence_details_has_evidence,\n        evidence_details_past_due,\n        evidence_details_submission_count,\n        evidence_duplicate_charge_documentation,\n        evidence_duplicate_charge_explanation,\n        evidence_duplicate_charge_id,\n        evidence_product_description,\n        evidence_receipt,\n        evidence_refund_policy,\n        evidence_refund_policy_disclosure,\n        evidence_refund_refusal_explanation,\n        evidence_service_date,\n        evidence_service_documentation,\n        evidence_shipping_address,\n        evidence_shipping_carrier,\n        evidence_shipping_date,\n        evidence_shipping_documentation,\n        evidence_shipping_tracking_number,\n        evidence_uncategorized_file,\n        evidence_uncategorized_text,\n        is_charge_refundable,\n        metadata as dispute_metadata,\n        reason as dispute_reason,\n        status as dispute_status,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__dispute`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:02.231939Z", "completed_at": "2024-02-29T18:22:03.036636Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:03.037217Z", "completed_at": "2024-02-29T18:22:03.037223Z"}], "thread_id": "Thread-3", "execution_time": 0.8071331977844238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__fee", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__fee_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        index,\n        amount,\n        application,\n        currency,\n        description,\n        type,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__fee`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:02.217117Z", "completed_at": "2024-02-29T18:22:03.042750Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:03.043273Z", "completed_at": "2024-02-29T18:22:03.043277Z"}], "thread_id": "Thread-1", "execution_time": 0.8272101879119873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__customer_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_balance\n    \n as \n    \n    account_balance\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_postal_code\n    \n as \n    \n    address_postal_code\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_card_id\n    \n as \n    \n    default_card_id\n    \n, \n    \n    \n    delinquent\n    \n as \n    \n    delinquent\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_prefix\n    \n as \n    \n    invoice_prefix\n    \n, \n    \n    \n    invoice_settings_default_payment_method\n    \n as \n    \n    invoice_settings_default_payment_method\n    \n, \n    \n    \n    invoice_settings_footer\n    \n as \n    \n    invoice_settings_footer\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_info_tax_id\n    \n as \n    \n    tax_info_tax_id\n    \n, \n    \n    \n    tax_info_type\n    \n as \n    \n    tax_info_type\n    \n, \n    \n    \n    tax_info_verification_status\n    \n as \n    \n    tax_info_verification_status\n    \n, \n    \n    \n    tax_info_verification_verified_name\n    \n as \n    \n    tax_info_verification_verified_name\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        address_city as customer_address_city,\n        address_country as customer_address_country,\n        address_line_1 as customer_address_line_1,\n        address_line_2 as customer_address_line_2,\n        address_postal_code as customer_address_postal_code,\n        address_state as customer_address_state,\n        balance as customer_balance,\n        bank_account_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        name as customer_name,\n        phone,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone,\n        source_relation,\n        coalesce(is_deleted, false) as is_deleted\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__customer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:02.237458Z", "completed_at": "2024-02-29T18:22:03.049402Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:03.050082Z", "completed_at": "2024-02-29T18:22:03.050087Z"}], "thread_id": "Thread-4", "execution_time": 0.8141911029815674, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_line_item", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice_line_item_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discountable\n    \n as \n    \n    discountable\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    cast(null as string) as \n    \n    invoice_item_id\n    \n , \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    cast(null as string) as \n    \n    price_id\n    \n , \n    \n    \n    proration\n    \n as \n    \n    proration\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    subscription_item_id\n    \n as \n    \n    subscription_item_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unique_id\n    \n as \n    \n    unique_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        invoice_item_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        price_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id as unique_invoice_line_item_id,\n        period_start,\n        period_end,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n\n    \n    and id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    \n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice_line_item`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:02.942596Z", "completed_at": "2024-02-29T18:22:03.489682Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:03.490247Z", "completed_at": "2024-02-29T18:22:03.490253Z"}], "thread_id": "Thread-2", "execution_time": 0.5496020317077637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as INT64) as \n    \n    amount_due\n    \n , \n    cast(null as INT64) as \n    \n    amount_paid\n    \n , \n    cast(null as INT64) as \n    \n    amount_remaining\n    \n , \n    cast(null as INT64) as \n    \n    application_fee_amount\n    \n , \n    cast(null as INT64) as \n    \n    post_payment_credit_notes_amount\n    \n , \n    cast(null as INT64) as \n    \n    pre_payment_credit_notes_amount\n    \n , \n    cast(null as INT64) as \n    \n    attempt_count\n    \n , \n    cast(null as boolean) as \n    \n    attempted\n    \n , \n    cast(null as boolean) as \n    \n    auto_advance\n    \n , \n    cast(null as string) as \n    \n    billing\n    \n , \n    cast(null as string) as \n    \n    billing_reason\n    \n , \n    cast(null as string) as \n    \n    charge_id\n    \n , \n    cast(null as timestamp) as \n    \n    created\n    \n , \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    cast(null as string) as \n    \n    default_source_id\n    \n , \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as timestamp) as \n    \n    due_date\n    \n , \n    cast(null as INT64) as \n    \n    ending_balance\n    \n , \n    cast(null as timestamp) as \n    \n    finalized_at\n    \n , \n    cast(null as string) as \n    \n    footer\n    \n , \n    cast(null as string) as \n    \n    hosted_invoice_url\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as string) as \n    \n    invoice_pdf\n    \n , \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    cast(null as timestamp) as \n    \n    next_payment_attempt\n    \n , \n    cast(null as string) as \n    \n    number\n    \n , \n    cast(null as boolean) as \n    \n    paid\n    \n , \n    cast(null as string) as \n    \n    default_payment_method_id\n    \n , \n    cast(null as string) as \n    \n    payment_intent_id\n    \n , \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    cast(null as string) as \n    \n    receipt_number\n    \n , \n    cast(null as INT64) as \n    \n    starting_balance\n    \n , \n    cast(null as string) as \n    \n    statement_descriptor\n    \n , \n    cast(null as string) as \n    \n    status\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_finalized_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_marked_uncollectible_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_paid_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_voided_at\n    \n , \n    cast(null as INT64) as \n    \n    subscription_proration_date\n    \n , \n    cast(null as INT64) as \n    \n    subtotal\n    \n , \n    cast(null as INT64) as \n    \n    tax\n    \n , \n    cast(null as numeric) as \n    \n    tax_percent\n    \n , \n    cast(null as INT64) as \n    \n    threshold_reason_amount_gte\n    \n , \n    cast(null as INT64) as \n    \n    total\n    \n , \n    cast(null as timestamp) as \n    \n    webhooks_delivered_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        default_payment_method_id,\n        payment_intent_id,\n        subscription_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        post_payment_credit_notes_amount,\n        pre_payment_credit_notes_amount,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total,\n        period_start,\n        period_end,\n        cast(status_transitions_finalized_at as timestamp) as status_transitions_finalized_at,\n        cast(status_transitions_marked_uncollectible_at as timestamp) as status_transitions_marked_uncollectible_at,\n        cast(status_transitions_paid_at as timestamp) as status_transitions_paid_at,\n        cast(status_transitions_voided_at as timestamp) as status_transitions_voided_at,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    and not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:03.044996Z", "completed_at": "2024-02-29T18:22:03.516369Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:03.516899Z", "completed_at": "2024-02-29T18:22:03.516906Z"}], "thread_id": "Thread-1", "execution_time": 0.4731299877166748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_intent", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_intent_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_capturable\n    \n as \n    \n    amount_capturable\n    \n, \n    \n    \n    amount_received\n    \n as \n    \n    amount_received\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    capture_method\n    \n as \n    \n    capture_method\n    \n, \n    \n    \n    confirmation_method\n    \n as \n    \n    confirmation_method\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_payment_error_charge_id\n    \n as \n    \n    last_payment_error_charge_id\n    \n, \n    \n    \n    last_payment_error_code\n    \n as \n    \n    last_payment_error_code\n    \n, \n    \n    \n    last_payment_error_decline_code\n    \n as \n    \n    last_payment_error_decline_code\n    \n, \n    \n    \n    last_payment_error_doc_url\n    \n as \n    \n    last_payment_error_doc_url\n    \n, \n    \n    \n    last_payment_error_message\n    \n as \n    \n    last_payment_error_message\n    \n, \n    \n    \n    last_payment_error_param\n    \n as \n    \n    last_payment_error_param\n    \n, \n    \n    \n    last_payment_error_source_id\n    \n as \n    \n    last_payment_error_source_id\n    \n, \n    \n    \n    last_payment_error_type\n    \n as \n    \n    last_payment_error_type\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        cast(canceled_at as timestamp) as canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_intent`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:03.051726Z", "completed_at": "2024-02-29T18:22:03.604523Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:03.605097Z", "completed_at": "2024-02-29T18:22:03.605104Z"}], "thread_id": "Thread-4", "execution_time": 0.5544350147247314, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_method_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    billing_detail_address_city\n    \n as \n    \n    billing_detail_address_city\n    \n, \n    \n    \n    billing_detail_address_country\n    \n as \n    \n    billing_detail_address_country\n    \n, \n    \n    \n    billing_detail_address_line_1\n    \n as \n    \n    billing_detail_address_line_1\n    \n, \n    \n    \n    billing_detail_address_line_2\n    \n as \n    \n    billing_detail_address_line_2\n    \n, \n    \n    \n    billing_detail_address_postal_code\n    \n as \n    \n    billing_detail_address_postal_code\n    \n, \n    \n    \n    billing_detail_address_state\n    \n as \n    \n    billing_detail_address_state\n    \n, \n    \n    \n    billing_detail_email\n    \n as \n    \n    billing_detail_email\n    \n, \n    \n    \n    billing_detail_name\n    \n as \n    \n    billing_detail_name\n    \n, \n    \n    \n    billing_detail_phone\n    \n as \n    \n    billing_detail_phone\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        metadata,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_method`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:03.038895Z", "completed_at": "2024-02-29T18:22:03.611106Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:03.611646Z", "completed_at": "2024-02-29T18:22:03.611651Z"}], "thread_id": "Thread-3", "execution_time": 0.5738091468811035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_card", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_method_card_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    wallet_type\n    \n as \n    \n    wallet_type\n    \n, \n    cast(null as string) as \n    \n    three_d_secure_authentication_flow\n    \n , \n    cast(null as string) as \n    \n    three_d_secure_result\n    \n , \n    cast(null as string) as \n    \n    three_d_secure_result_reason\n    \n , \n    cast(null as string) as \n    \n    three_d_secure_version\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding,\n        charge_id,\n        type,\n        wallet_type,\n        three_d_secure_authentication_flow,\n        three_d_secure_result,\n        three_d_secure_result_reason,\n        three_d_secure_version,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_method_card`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:03.606769Z", "completed_at": "2024-02-29T18:22:04.108066Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.109820Z", "completed_at": "2024-02-29T18:22:04.109835Z"}], "thread_id": "Thread-4", "execution_time": 0.5048000812530518, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__refund", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__refund_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    cast(null as string) as \n    \n    payment_intent_id\n    \n , \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_reason\n    \n as \n    \n    failure_reason\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        payment_intent_id,\n        balance_transaction_id,\n        charge_id,\n        amount,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__refund`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:03.518971Z", "completed_at": "2024-02-29T18:22:04.108641Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.110219Z", "completed_at": "2024-02-29T18:22:04.110223Z"}], "thread_id": "Thread-1", "execution_time": 0.5935847759246826, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__price_plan", "compiled": true, "compiled_code": "\n\nwith price_plan as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__price_plan_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as is_active , \n    \n    \n    billing_scheme\n    \n as \n    \n    billing_scheme\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    nickname\n    \n as \n    \n    nickname\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    recurring_aggregate_usage\n    \n as \n    \n    recurring_aggregate_usage\n    \n, \n    \n    \n    recurring_interval\n    \n as \n    \n    recurring_interval\n    \n, \n    \n    \n    recurring_interval_count\n    \n as \n    \n    recurring_interval_count\n    \n, \n    \n    \n    recurring_usage_type\n    \n as \n    \n    recurring_usage_type\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    unit_amount_decimal\n    \n as \n    \n    unit_amount_decimal\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from price_plan\n),\n\nfinal as (\n\n    select \n        id as price_plan_id,\n        is_active,\n        unit_amount,\n        currency,\n        recurring_interval,\n        recurring_interval_count,\n        recurring_usage_type,\n        recurring_aggregate_usage,\n        metadata,\n        nickname,\n        product_id,\n        billing_scheme,\n        cast(created as timestamp) as created_at,\n        is_deleted,\n        source_relation\n\n        \n        \n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__price_plan`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.116744Z", "completed_at": "2024-02-29T18:22:04.134595Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.135259Z", "completed_at": "2024-02-29T18:22:04.135266Z"}], "thread_id": "Thread-1", "execution_time": 0.021999835968017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation.822bb93896", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__account`\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.137437Z", "completed_at": "2024-02-29T18:22:04.141742Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.142273Z", "completed_at": "2024-02-29T18:22:04.142277Z"}], "thread_id": "Thread-1", "execution_time": 0.006086111068725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation.6e04594797", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        card_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__card`\n    group by card_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.143961Z", "completed_at": "2024-02-29T18:22:04.149839Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.168959Z", "completed_at": "2024-02-29T18:22:04.168965Z"}], "thread_id": "Thread-1", "execution_time": 0.03812813758850098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__account_account_id.374858379a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__account`\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:03.613486Z", "completed_at": "2024-02-29T18:22:04.186161Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.186715Z", "completed_at": "2024-02-29T18:22:04.186719Z"}], "thread_id": "Thread-3", "execution_time": 0.5744822025299072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__subscription", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__subscription_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_active\n    \n as \n    \n    _fivetran_active\n    \n, \n    \n    \n    application_fee_percent\n    \n as \n    \n    application_fee_percent\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_cycle_anchor\n    \n as \n    \n    billing_cycle_anchor\n    \n, \n    \n    \n    billing_threshold_amount_gte\n    \n as \n    \n    billing_threshold_amount_gte\n    \n, \n    \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n as \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n, \n    \n    \n    cancel_at\n    \n as \n    \n    cancel_at\n    \n, \n    \n    \n    cancel_at_period_end\n    \n as \n    \n    cancel_at_period_end\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    current_period_end\n    \n as \n    \n    current_period_end\n    \n, \n    \n    \n    current_period_start\n    \n as \n    \n    current_period_start\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    days_until_due\n    \n as \n    \n    days_until_due\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as string) as \n    \n    latest_invoice_id\n    \n , \n    cast(null as string) as \n    \n    default_payment_method_id\n    \n , \n    cast(null as string) as \n    \n    pending_setup_intent_id\n    \n , \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    trial_end\n    \n as \n    \n    trial_end\n    \n, \n    \n    \n    trial_start\n    \n as \n    \n    trial_start\n    \n, \n    cast(null as string) as \n    \n    pause_collection_behavior\n    \n , \n    cast(null as timestamp) as \n    \n    pause_collection_resumes_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        latest_invoice_id,\n        customer_id,\n        default_payment_method_id,\n        pending_setup_intent_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cast(cancel_at as timestamp) as cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        cast(canceled_at as timestamp) as canceled_at,\n        cast(created as timestamp) as created_at,\n        current_period_start,\n        current_period_end,\n        days_until_due,\n        metadata,\n        cast(start_date as timestamp) as start_date_at,\n        cast(ended_at as timestamp) as ended_at,\n        pause_collection_behavior,\n        cast(pause_collection_resumes_at as timestamp) as pause_collection_resumes_at,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    \n        and coalesce(_fivetran_active, true)\n    \n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__subscription`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:03.492090Z", "completed_at": "2024-02-29T18:22:04.191915Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.193354Z", "completed_at": "2024-02-29T18:22:04.193359Z"}], "thread_id": "Thread-2", "execution_time": 0.7029318809509277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payout_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    arrival_date\n    \n as \n    \n    arrival_date\n    \n, \n    \n    \n    automatic\n    \n as \n    \n    automatic\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination_bank_account_id\n    \n as \n    \n    destination_bank_account_id\n    \n, \n    \n    \n    destination_card_id\n    \n as \n    \n    destination_card_id\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    method\n    \n as \n    \n    method\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        cast(arrival_date as timestamp) as arrival_date_at,\n        automatic as is_automatic,\n        balance_transaction_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        destination_bank_account_id,\n        destination_card_id,\n        metadata,\n        method,\n        source_type,\n        status,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payout`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.182850Z", "completed_at": "2024-02-29T18:22:04.192272Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.193641Z", "completed_at": "2024-02-29T18:22:04.193644Z"}], "thread_id": "Thread-1", "execution_time": 0.012742042541503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect card_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__card`\nwhere card_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.188324Z", "completed_at": "2024-02-29T18:22:04.193897Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.196166Z", "completed_at": "2024-02-29T18:22:04.196169Z"}], "thread_id": "Thread-3", "execution_time": 0.009695291519165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation.e83fa67eba", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__balance_transaction`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.201969Z", "completed_at": "2024-02-29T18:22:04.210053Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.210567Z", "completed_at": "2024-02-29T18:22:04.210572Z"}], "thread_id": "Thread-1", "execution_time": 0.014199972152709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation.4616b292a1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__charge`\n    group by charge_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.206881Z", "completed_at": "2024-02-29T18:22:04.215706Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.216833Z", "completed_at": "2024-02-29T18:22:04.216838Z"}], "thread_id": "Thread-3", "execution_time": 0.011956930160522461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__charge`\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.198675Z", "completed_at": "2024-02-29T18:22:04.215977Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.217136Z", "completed_at": "2024-02-29T18:22:04.217140Z"}], "thread_id": "Thread-2", "execution_time": 0.0221099853515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__balance_transaction`\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.212244Z", "completed_at": "2024-02-29T18:22:04.217425Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.219722Z", "completed_at": "2024-02-29T18:22:04.219725Z"}], "thread_id": "Thread-1", "execution_time": 0.009350061416625977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation.3fe3205476", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        dispute_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__dispute`\n    group by dispute_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.225568Z", "completed_at": "2024-02-29T18:22:04.233387Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.233868Z", "completed_at": "2024-02-29T18:22:04.233872Z"}], "thread_id": "Thread-2", "execution_time": 0.013907909393310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__fee_balance_transaction_id.725d4ac005", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__fee`\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.222056Z", "completed_at": "2024-02-29T18:22:04.238333Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.239658Z", "completed_at": "2024-02-29T18:22:04.239662Z"}], "thread_id": "Thread-3", "execution_time": 0.0206298828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation.d2b1cfff07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, index, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__fee`\n    group by balance_transaction_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.229238Z", "completed_at": "2024-02-29T18:22:04.238633Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.239930Z", "completed_at": "2024-02-29T18:22:04.239933Z"}], "thread_id": "Thread-1", "execution_time": 0.012656927108764648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation.3fa0f43271", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__customer`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.235426Z", "completed_at": "2024-02-29T18:22:04.239386Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.241600Z", "completed_at": "2024-02-29T18:22:04.241603Z"}], "thread_id": "Thread-2", "execution_time": 0.007765054702758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__customer`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.244941Z", "completed_at": "2024-02-29T18:22:04.256828Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.257334Z", "completed_at": "2024-02-29T18:22:04.257339Z"}], "thread_id": "Thread-3", "execution_time": 0.01481485366821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation.d2ff4b8aed", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_line_item_id, invoice_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice_line_item`\n    group by invoice_line_item_id, invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.248831Z", "completed_at": "2024-02-29T18:22:04.262833Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.263970Z", "completed_at": "2024-02-29T18:22:04.263974Z"}], "thread_id": "Thread-1", "execution_time": 0.021593809127807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_line_item_invoice_line_item_id.5b9c83b5f3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_line_item_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice_line_item`\nwhere invoice_line_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.252382Z", "completed_at": "2024-02-29T18:22:04.263165Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.264494Z", "completed_at": "2024-02-29T18:22:04.264498Z"}], "thread_id": "Thread-2", "execution_time": 0.02119278907775879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_invoice_line_item_id.a59523b7b7", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unique_invoice_line_item_id as unique_field\n  from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice_line_item`\n  where unique_invoice_line_item_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.258932Z", "completed_at": "2024-02-29T18:22:04.264249Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.266409Z", "completed_at": "2024-02-29T18:22:04.266412Z"}], "thread_id": "Thread-3", "execution_time": 0.009198904037475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation.f632654e72", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice`\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.272743Z", "completed_at": "2024-02-29T18:22:04.279594Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.280401Z", "completed_at": "2024-02-29T18:22:04.280406Z"}], "thread_id": "Thread-2", "execution_time": 0.013504981994628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation.046730da02", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_intent_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_intent`\n    group by payment_intent_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.268968Z", "completed_at": "2024-02-29T18:22:04.280142Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.281916Z", "completed_at": "2024-02-29T18:22:04.281920Z"}], "thread_id": "Thread-1", "execution_time": 0.01596212387084961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__invoice`\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.276586Z", "completed_at": "2024-02-29T18:22:04.280654Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.282428Z", "completed_at": "2024-02-29T18:22:04.282432Z"}], "thread_id": "Thread-3", "execution_time": 0.01152491569519043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_intent_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_intent`\nwhere payment_intent_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.285498Z", "completed_at": "2024-02-29T18:22:04.296660Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.297302Z", "completed_at": "2024-02-29T18:22:04.297307Z"}], "thread_id": "Thread-2", "execution_time": 0.014538049697875977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation.fe1f48acd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_method_card`\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.290808Z", "completed_at": "2024-02-29T18:22:04.299191Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.303636Z", "completed_at": "2024-02-29T18:22:04.303641Z"}], "thread_id": "Thread-1", "execution_time": 0.019420146942138672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation.02a8143517", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_method`\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.293798Z", "completed_at": "2024-02-29T18:22:04.302708Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.303969Z", "completed_at": "2024-02-29T18:22:04.303973Z"}], "thread_id": "Thread-3", "execution_time": 0.015226125717163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_card_payment_method_id.f246b11438", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_method_card`\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.299479Z", "completed_at": "2024-02-29T18:22:04.305690Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.307518Z", "completed_at": "2024-02-29T18:22:04.307521Z"}], "thread_id": "Thread-2", "execution_time": 0.013913869857788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payment_method`\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.308025Z", "completed_at": "2024-02-29T18:22:04.317458Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.322323Z", "completed_at": "2024-02-29T18:22:04.322329Z"}], "thread_id": "Thread-1", "execution_time": 0.01683211326599121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation.93aa6111ec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__refund`\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.312699Z", "completed_at": "2024-02-29T18:22:04.318064Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.322625Z", "completed_at": "2024-02-29T18:22:04.322629Z"}], "thread_id": "Thread-3", "execution_time": 0.016730308532714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__refund`\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.318555Z", "completed_at": "2024-02-29T18:22:04.324297Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.326065Z", "completed_at": "2024-02-29T18:22:04.326069Z"}], "thread_id": "Thread-2", "execution_time": 0.013233184814453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation.3d189cd99d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_plan_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__price_plan`\n    group by price_plan_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.326715Z", "completed_at": "2024-02-29T18:22:04.334548Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.339276Z", "completed_at": "2024-02-29T18:22:04.339281Z"}], "thread_id": "Thread-1", "execution_time": 0.015192031860351562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation.1b87d4205c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__subscription`\n    group by subscription_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.330572Z", "completed_at": "2024-02-29T18:22:04.338974Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.340404Z", "completed_at": "2024-02-29T18:22:04.340408Z"}], "thread_id": "Thread-3", "execution_time": 0.015992164611816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__subscription_subscription_id.b242b1f7bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__subscription`\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.334856Z", "completed_at": "2024-02-29T18:22:04.340673Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.342427Z", "completed_at": "2024-02-29T18:22:04.342431Z"}], "thread_id": "Thread-2", "execution_time": 0.00918722152709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation.f9897a29ec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payout_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payout`\n    group by payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.343430Z", "completed_at": "2024-02-29T18:22:04.347844Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.348340Z", "completed_at": "2024-02-29T18:22:04.348343Z"}], "thread_id": "Thread-1", "execution_time": 0.006807088851928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payout_id\nfrom `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__payout`\nwhere payout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.115140Z", "completed_at": "2024-02-29T18:22:04.834823Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.835334Z", "completed_at": "2024-02-29T18:22:04.835340Z"}], "thread_id": "Thread-4", "execution_time": 0.7224798202514648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__transfer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__transfer_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_reversed\n    \n as \n    \n    amount_reversed\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    destination_payment\n    \n as \n    \n    destination_payment\n    \n, \n    \n    \n    destination_payment_id\n    \n as \n    \n    destination_payment_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reversed\n    \n as \n    \n    reversed\n    \n, \n    \n    \n    source_transaction\n    \n as \n    \n    source_transaction\n    \n, \n    \n    \n    source_transaction_id\n    \n as \n    \n    source_transaction_id\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as transfer_id,\n        amount as transfer_amount,\n        amount_reversed as transfer_amount_reversed,\n        balance_transaction_id,\n        cast(created as timestamp) as transfer_created_at,\n        currency as transfer_currency,\n        description as transfer_description,\n        destination as transfer_destination,\n        destination_payment,\n        destination_payment_id,\n        metadata as transfer_metadata,\n        reversed as transfer_is_reversed,\n        source_transaction,\n        source_transaction_id,\n        source_type,\n        transfer_group,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__transfer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:22:04.837263Z", "completed_at": "2024-02-29T18:22:04.840884Z"}, {"name": "execute", "started_at": "2024-02-29T18:22:04.841371Z", "completed_at": "2024-02-29T18:22:04.841375Z"}], "thread_id": "Thread-3", "execution_time": 0.005181789398193359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation.ade160ba67", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from `dbt-package-testing`.`stripe_source_testing_stg_stripe`.`stg_stripe__transfer`\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 4.762164831161499, "args": {"static": false, "which": "generate", "compile": true, "indirect_selection": "eager", "macro_debugging": false, "invocation_command": "dbt docs generate", "populate_cache": true, "log_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe_source/integration_tests/logs", "quiet": false, "use_colors": true, "warn_error_options": {"include": [], "exclude": []}, "log_level": "info", "printer_width": 80, "version_check": true, "partial_parse_file_diff": true, "exclude": [], "defer": false, "show_resource_report": false, "select": [], "write_json": true, "use_colors_file": true, "log_format": "default", "project_dir": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe_source/integration_tests", "introspect": true, "profiles_dir": "/Users/jamie.rodriguez/.dbt", "partial_parse": true, "send_anonymous_usage_stats": true, "cache_selected_only": false, "enable_legacy_logger": false, "strict_mode": false, "log_format_file": "debug", "log_level_file": "debug", "favor_state": false, "vars": {}, "static_parser": true, "log_file_max_bytes": 10485760, "print": true, "empty_catalog": false}}