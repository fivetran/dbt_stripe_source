{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-08-13T16:42:00.874480Z", "invocation_id": "f8ca60e5-64a6-43a8-949e-bc8f1e7e7f05", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:46.885495Z", "completed_at": "2024-08-13T16:41:47.265201Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:47.267272Z", "completed_at": "2024-08-13T16:41:47.267329Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3876678943634033, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`account`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:46.925624Z", "completed_at": "2024-08-13T16:41:47.294677Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:47.295385Z", "completed_at": "2024-08-13T16:41:47.295399Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.41338586807250977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__card_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`card`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:46.926521Z", "completed_at": "2024-08-13T16:41:47.324505Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:47.325069Z", "completed_at": "2024-08-13T16:41:47.325078Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4423689842224121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__charge_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`charge`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:46.911218Z", "completed_at": "2024-08-13T16:41:47.332533Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:47.333371Z", "completed_at": "2024-08-13T16:41:47.333379Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.45222997665405273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__balance_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`balance_transaction`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:47.273049Z", "completed_at": "2024-08-13T16:41:47.657116Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:47.658797Z", "completed_at": "2024-08-13T16:41:47.658806Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3888709545135498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`customer`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:47.328113Z", "completed_at": "2024-08-13T16:41:47.657567Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:47.659121Z", "completed_at": "2024-08-13T16:41:47.659126Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3339107036590576, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__dispute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`dispute`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__dispute_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:47.298109Z", "completed_at": "2024-08-13T16:41:47.674448Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:47.675243Z", "completed_at": "2024-08-13T16:41:47.675255Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3791670799255371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__discount_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`discount`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__discount_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:47.335693Z", "completed_at": "2024-08-13T16:41:47.761075Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:47.762639Z", "completed_at": "2024-08-13T16:41:47.762645Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4282650947570801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__fee_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`fee`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__fee_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:47.667972Z", "completed_at": "2024-08-13T16:41:48.041461Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:48.042636Z", "completed_at": "2024-08-13T16:41:48.042654Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.38123083114624023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`invoice`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:47.663706Z", "completed_at": "2024-08-13T16:41:48.056256Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:48.057168Z", "completed_at": "2024-08-13T16:41:48.057178Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.395982027053833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_line_item_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`invoice_line_item`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:47.677987Z", "completed_at": "2024-08-13T16:41:48.094326Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:48.095128Z", "completed_at": "2024-08-13T16:41:48.095139Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4186408519744873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_intent_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`payment_intent`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:47.764449Z", "completed_at": "2024-08-13T16:41:48.128427Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:48.128913Z", "completed_at": "2024-08-13T16:41:48.128919Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.36540794372558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_card_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`payment_method_card`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:48.060063Z", "completed_at": "2024-08-13T16:41:48.399480Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:48.401231Z", "completed_at": "2024-08-13T16:41:48.401251Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3434762954711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`payout`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:48.046845Z", "completed_at": "2024-08-13T16:41:48.448610Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:48.449743Z", "completed_at": "2024-08-13T16:41:48.449756Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.40550708770751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`payment_method`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:48.130570Z", "completed_at": "2024-08-13T16:41:48.470223Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:48.470950Z", "completed_at": "2024-08-13T16:41:48.470960Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3416409492492676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__product_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`product`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__product_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:48.407237Z", "completed_at": "2024-08-13T16:41:48.729450Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:48.731082Z", "completed_at": "2024-08-13T16:41:48.731101Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.32803773880004883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__refund_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`refund`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:48.473358Z", "completed_at": "2024-08-13T16:41:48.866632Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:48.867605Z", "completed_at": "2024-08-13T16:41:48.867619Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.39610981941223145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__transfer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`transfer`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__transfer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:48.736415Z", "completed_at": "2024-08-13T16:41:49.149946Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:49.150612Z", "completed_at": "2024-08-13T16:41:49.150620Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.41642117500305176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__account", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    business_profile_name\n    \n as \n    \n    business_profile_name\n    \n, \n    \n    \n    business_profile_mcc\n    \n as \n    \n    business_profile_mcc\n    \n, \n    \n    \n    business_type\n    \n as \n    \n    business_type\n    \n, \n    \n    \n    charges_enabled\n    \n as \n    \n    charges_enabled\n    \n, \n    \n    \n    company_address_city\n    \n as \n    \n    company_address_city\n    \n, \n    \n    \n    company_address_country\n    \n as \n    \n    company_address_country\n    \n, \n    \n    \n    company_address_line_1\n    \n as \n    \n    company_address_line_1\n    \n, \n    \n    \n    company_address_line_2\n    \n as \n    \n    company_address_line_2\n    \n, \n    \n    \n    company_address_postal_code\n    \n as \n    \n    company_address_postal_code\n    \n, \n    \n    \n    company_address_state\n    \n as \n    \n    company_address_state\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    company_phone\n    \n as \n    \n    company_phone\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    default_currency\n    \n as \n    \n    default_currency\n    \n, \n    \n    \n    details_submitted\n    \n as \n    \n    details_submitted\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    payouts_enabled\n    \n as \n    \n    payouts_enabled\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        business_profile_mcc,\n        business_profile_name,\n        business_type,\n        charges_enabled,\n        company_address_city,\n        company_address_country,\n        company_address_line_1,\n        company_address_line_2,\n        company_address_postal_code,\n        company_address_state,\n        company_name,\n        company_phone,\n        country,\n        cast(created as timestamp) as created_at,\n        default_currency,\n        email,\n        is_deleted,\n        metadata,\n        payouts_enabled as is_payouts_enabled,\n        type as account_type,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:48.870485Z", "completed_at": "2024-08-13T16:41:49.238802Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:49.239441Z", "completed_at": "2024-08-13T16:41:49.239451Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.37034082412719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__card", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_1_check\n    \n as \n    \n    address_line_1_check\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    address_zip\n    \n as \n    \n    address_zip\n    \n, \n    \n    \n    address_zip_check\n    \n as \n    \n    address_zip_check\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    cvc_check\n    \n as \n    \n    cvc_check\n    \n, \n    \n    \n    dynamic_last_4\n    \n as \n    \n    dynamic_last_4\n    \n, \n    \n    \n    exp_month\n    \n as \n    \n    exp_month\n    \n, \n    \n    \n    exp_year\n    \n as \n    \n    exp_year\n    \n, \n    \n    \n    fingerprint\n    \n as \n    \n    fingerprint\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_4\n    \n as \n    \n    last_4\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    network\n    \n as \n    \n    network\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    tokenization_method\n    \n as \n    \n    tokenization_method\n    \n, \n    \n    \n    wallet_type\n    \n as \n    \n    wallet_type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        account_id,\n        address_city as card_address_city,\n        address_country as card_address_country,\n        address_line_1 as card_address_line_1,\n        address_line_2 as card_address_line_2,\n        address_state as card_address_state,\n        address_zip as card_address_postal_code,\n        wallet_type,\n        brand,\n        country,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        name as card_name,\n        recipient,\n        funding,\n        source_relation\n        \n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:49.153003Z", "completed_at": "2024-08-13T16:41:49.585733Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:49.586376Z", "completed_at": "2024-08-13T16:41:49.586422Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4351170063018799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__charge", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_refunded\n    \n as \n    \n    amount_refunded\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    calculated_statement_descriptor\n    \n as \n    \n    calculated_statement_descriptor\n    \n, \n    \n    \n    captured\n    \n as \n    \n    captured\n    \n, \n    \n    \n    card_id\n    \n as \n    \n    card_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    fraud_details_stripe_report\n    \n as \n    \n    fraud_details_stripe_report\n    \n, \n    \n    \n    fraud_details_user_report\n    \n as \n    \n    fraud_details_user_report\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    outcome_network_status\n    \n as \n    \n    outcome_network_status\n    \n, \n    \n    \n    outcome_reason\n    \n as \n    \n    outcome_reason\n    \n, \n    \n    \n    outcome_risk_level\n    \n as \n    \n    outcome_risk_level\n    \n, \n    \n    \n    outcome_risk_score\n    \n as \n    \n    outcome_risk_score\n    \n, \n    \n    \n    outcome_seller_message\n    \n as \n    \n    outcome_seller_message\n    \n, \n    \n    \n    outcome_type\n    \n as \n    \n    outcome_type\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    receipt_url\n    \n as \n    \n    receipt_url\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_transfer\n    \n as \n    \n    source_transfer\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    billing_detail_address_city\n    \n as \n    \n    billing_detail_address_city\n    \n, \n    \n    \n    billing_detail_address_country\n    \n as \n    \n    billing_detail_address_country\n    \n, \n    cast(null as string) as \n    \n    billing_detail_address_line1\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_line2\n    \n , \n    \n    \n    billing_detail_address_postal_code\n    \n as \n    \n    billing_detail_address_postal_code\n    \n, \n    \n    \n    billing_detail_address_state\n    \n as \n    \n    billing_detail_address_state\n    \n, \n    \n    \n    billing_detail_email\n    \n as \n    \n    billing_detail_email\n    \n, \n    \n    \n    billing_detail_name\n    \n as \n    \n    billing_detail_name\n    \n, \n    \n    \n    billing_detail_phone\n    \n as \n    \n    billing_detail_phone\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        payment_method_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_carrier,\n        shipping_name,\n        shipping_phone,\n        shipping_tracking_number,\n        source_id,\n        source_transfer,\n        statement_descriptor,\n        invoice_id,\n        calculated_statement_descriptor,\n        billing_detail_address_city,\n        billing_detail_address_country,\n        billing_detail_address_line1,\n        billing_detail_address_line2,\n        billing_detail_address_postal_code,\n        billing_detail_address_state,\n        billing_detail_email,\n        billing_detail_name,\n        billing_detail_phone,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:49.241338Z", "completed_at": "2024-08-13T16:41:49.608423Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:49.608880Z", "completed_at": "2024-08-13T16:41:49.608887Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3686542510986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__balance_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    available_on\n    \n as \n    \n    available_on\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    fee\n    \n as \n    \n    fee\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    net\n    \n as \n    \n    net\n    \n, \n    \n    \n    payout_id\n    \n as \n    \n    payout_id\n    \n, \n    \n    \n    reporting_category\n    \n as \n    \n    reporting_category\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n        cast(available_on as timestamp) as available_on,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        reporting_category,\n        source,\n        status,\n        type,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:49.588338Z", "completed_at": "2024-08-13T16:41:49.948142Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:49.960875Z", "completed_at": "2024-08-13T16:41:49.960901Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3780481815338135, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_balance\n    \n as \n    \n    account_balance\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_postal_code\n    \n as \n    \n    address_postal_code\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_card_id\n    \n as \n    \n    default_card_id\n    \n, \n    \n    \n    delinquent\n    \n as \n    \n    delinquent\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_prefix\n    \n as \n    \n    invoice_prefix\n    \n, \n    \n    \n    invoice_settings_default_payment_method\n    \n as \n    \n    invoice_settings_default_payment_method\n    \n, \n    \n    \n    invoice_settings_footer\n    \n as \n    \n    invoice_settings_footer\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_info_tax_id\n    \n as \n    \n    tax_info_tax_id\n    \n, \n    \n    \n    tax_info_type\n    \n as \n    \n    tax_info_type\n    \n, \n    \n    \n    tax_info_verification_status\n    \n as \n    \n    tax_info_verification_status\n    \n, \n    \n    \n    tax_info_verification_verified_name\n    \n as \n    \n    tax_info_verification_verified_name\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        address_city as customer_address_city,\n        address_country as customer_address_country,\n        address_line_1 as customer_address_line_1,\n        address_line_2 as customer_address_line_2,\n        address_postal_code as customer_address_postal_code,\n        address_state as customer_address_state,\n        balance as customer_balance,\n        bank_account_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        name as customer_name,\n        phone,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone,\n        source_relation,\n        coalesce(is_deleted, false) as is_deleted\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:49.610512Z", "completed_at": "2024-08-13T16:41:49.969615Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:49.970528Z", "completed_at": "2024-08-13T16:41:49.970534Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3611869812011719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__dispute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__dispute_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction\n    \n as \n    \n    balance_transaction\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    evidence_access_activity_log\n    \n as \n    \n    evidence_access_activity_log\n    \n, \n    \n    \n    evidence_billing_address\n    \n as \n    \n    evidence_billing_address\n    \n, \n    \n    \n    evidence_cancellation_policy\n    \n as \n    \n    evidence_cancellation_policy\n    \n, \n    \n    \n    evidence_cancellation_policy_disclosure\n    \n as \n    \n    evidence_cancellation_policy_disclosure\n    \n, \n    \n    \n    evidence_cancellation_rebuttal\n    \n as \n    \n    evidence_cancellation_rebuttal\n    \n, \n    \n    \n    evidence_customer_communication\n    \n as \n    \n    evidence_customer_communication\n    \n, \n    \n    \n    evidence_customer_email_address\n    \n as \n    \n    evidence_customer_email_address\n    \n, \n    \n    \n    evidence_customer_name\n    \n as \n    \n    evidence_customer_name\n    \n, \n    \n    \n    evidence_customer_purchase_ip\n    \n as \n    \n    evidence_customer_purchase_ip\n    \n, \n    \n    \n    evidence_customer_signature\n    \n as \n    \n    evidence_customer_signature\n    \n, \n    \n    \n    evidence_details_due_by\n    \n as \n    \n    evidence_details_due_by\n    \n, \n    \n    \n    evidence_details_has_evidence\n    \n as \n    \n    evidence_details_has_evidence\n    \n, \n    \n    \n    evidence_details_past_due\n    \n as \n    \n    evidence_details_past_due\n    \n, \n    \n    \n    evidence_details_submission_count\n    \n as \n    \n    evidence_details_submission_count\n    \n, \n    \n    \n    evidence_duplicate_charge_documentation\n    \n as \n    \n    evidence_duplicate_charge_documentation\n    \n, \n    \n    \n    evidence_duplicate_charge_explanation\n    \n as \n    \n    evidence_duplicate_charge_explanation\n    \n, \n    \n    \n    evidence_duplicate_charge_id\n    \n as \n    \n    evidence_duplicate_charge_id\n    \n, \n    \n    \n    evidence_product_description\n    \n as \n    \n    evidence_product_description\n    \n, \n    \n    \n    evidence_receipt\n    \n as \n    \n    evidence_receipt\n    \n, \n    \n    \n    evidence_refund_policy\n    \n as \n    \n    evidence_refund_policy\n    \n, \n    \n    \n    evidence_refund_policy_disclosure\n    \n as \n    \n    evidence_refund_policy_disclosure\n    \n, \n    \n    \n    evidence_refund_refusal_explanation\n    \n as \n    \n    evidence_refund_refusal_explanation\n    \n, \n    \n    \n    evidence_service_date\n    \n as \n    \n    evidence_service_date\n    \n, \n    \n    \n    evidence_service_documentation\n    \n as \n    \n    evidence_service_documentation\n    \n, \n    \n    \n    evidence_shipping_address\n    \n as \n    \n    evidence_shipping_address\n    \n, \n    \n    \n    evidence_shipping_carrier\n    \n as \n    \n    evidence_shipping_carrier\n    \n, \n    \n    \n    evidence_shipping_date\n    \n as \n    \n    evidence_shipping_date\n    \n, \n    \n    \n    evidence_shipping_documentation\n    \n as \n    \n    evidence_shipping_documentation\n    \n, \n    \n    \n    evidence_shipping_tracking_number\n    \n as \n    \n    evidence_shipping_tracking_number\n    \n, \n    \n    \n    evidence_uncategorized_file\n    \n as \n    \n    evidence_uncategorized_file\n    \n, \n    \n    \n    evidence_uncategorized_text\n    \n as \n    \n    evidence_uncategorized_text\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_charge_refundable\n    \n as \n    \n    is_charge_refundable\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as dispute_id,\n        amount as dispute_amount,\n        balance_transaction,\n        charge_id,\n        connected_account_id,\n        cast(created as timestamp) as dispute_created_at,\n        currency as dispute_currency,\n        evidence_access_activity_log,\n        evidence_billing_address,\n        evidence_cancellation_policy,\n        evidence_cancellation_policy_disclosure,\n        evidence_cancellation_rebuttal,\n        evidence_customer_communication,\n        evidence_customer_email_address,\n        evidence_customer_name,\n        evidence_customer_purchase_ip,\n        evidence_customer_signature,\n        evidence_details_due_by,\n        evidence_details_has_evidence,\n        evidence_details_past_due,\n        evidence_details_submission_count,\n        evidence_duplicate_charge_documentation,\n        evidence_duplicate_charge_explanation,\n        evidence_duplicate_charge_id,\n        evidence_product_description,\n        evidence_receipt,\n        evidence_refund_policy,\n        evidence_refund_policy_disclosure,\n        evidence_refund_refusal_explanation,\n        evidence_service_date,\n        evidence_service_documentation,\n        evidence_shipping_address,\n        evidence_shipping_carrier,\n        evidence_shipping_date,\n        evidence_shipping_documentation,\n        evidence_shipping_tracking_number,\n        evidence_uncategorized_file,\n        evidence_uncategorized_text,\n        is_charge_refundable,\n        metadata as dispute_metadata,\n        reason as dispute_reason,\n        status as dispute_status,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__dispute`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:49.972128Z", "completed_at": "2024-08-13T16:41:50.339817Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:50.340774Z", "completed_at": "2024-08-13T16:41:50.340790Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3707098960876465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__fee", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__fee_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        index,\n        amount,\n        application,\n        currency,\n        description,\n        type,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__fee`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:49.966993Z", "completed_at": "2024-08-13T16:41:50.363534Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:50.364180Z", "completed_at": "2024-08-13T16:41:50.364187Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3984181880950928, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__discount", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__discount_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    type_id\n    \n as \n    \n    type_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    checkout_session_id\n    \n as \n    \n    checkout_session_id\n    \n, \n    \n    \n    checkout_session_line_item_id\n    \n as \n    \n    checkout_session_line_item_id\n    \n, \n    \n    \n    coupon_id\n    \n as \n    \n    coupon_id\n    \n, \n    \n    \n    credit_note_line_item_id\n    \n as \n    \n    credit_note_line_item_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_item_id\n    \n as \n    \n    invoice_item_id\n    \n, \n    \n    \n    promotion_code\n    \n as \n    \n    promotion_code\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n        \n            \n            `end`\n            \n        \n    \n as end_at , \n    \n    \n        \n            \n            `start`\n            \n        \n    \n as start_at \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as discount_id,\n        type,\n        type_id,\n        amount,\n        checkout_session_id,\n        checkout_session_line_item_id,\n        coupon_id,\n        credit_note_line_item_id,\n        customer_id,\n        cast(end_at as timestamp) as end_at, -- renamed in macro get_discount_columns, source column name: end\n        invoice_id,\n        invoice_item_id,\n        promotion_code,\n        cast(start_at as timestamp) as start_at, -- renamed in macro get_discount_columns, source column name: start\n        subscription_id,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__discount`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:50.345281Z", "completed_at": "2024-08-13T16:41:50.796365Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:50.797628Z", "completed_at": "2024-08-13T16:41:50.797640Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4544689655303955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount_due\n    \n as \n    \n    amount_due\n    \n, \n    \n    \n    amount_paid\n    \n as \n    \n    amount_paid\n    \n, \n    \n    \n    amount_remaining\n    \n as \n    \n    amount_remaining\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    post_payment_credit_notes_amount\n    \n as \n    \n    post_payment_credit_notes_amount\n    \n, \n    \n    \n    pre_payment_credit_notes_amount\n    \n as \n    \n    pre_payment_credit_notes_amount\n    \n, \n    \n    \n    attempt_count\n    \n as \n    \n    attempt_count\n    \n, \n    \n    \n    attempted\n    \n as \n    \n    attempted\n    \n, \n    \n    \n    auto_advance\n    \n as \n    \n    auto_advance\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_reason\n    \n as \n    \n    billing_reason\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    ending_balance\n    \n as \n    \n    ending_balance\n    \n, \n    \n    \n    finalized_at\n    \n as \n    \n    finalized_at\n    \n, \n    \n    \n    footer\n    \n as \n    \n    footer\n    \n, \n    \n    \n    hosted_invoice_url\n    \n as \n    \n    hosted_invoice_url\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_pdf\n    \n as \n    \n    invoice_pdf\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    next_payment_attempt\n    \n as \n    \n    next_payment_attempt\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    starting_balance\n    \n as \n    \n    starting_balance\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_transitions_finalized_at\n    \n as \n    \n    status_transitions_finalized_at\n    \n, \n    \n    \n    status_transitions_marked_uncollectible_at\n    \n as \n    \n    status_transitions_marked_uncollectible_at\n    \n, \n    \n    \n    status_transitions_paid_at\n    \n as \n    \n    status_transitions_paid_at\n    \n, \n    \n    \n    status_transitions_voided_at\n    \n as \n    \n    status_transitions_voided_at\n    \n, \n    \n    \n    subscription_proration_date\n    \n as \n    \n    subscription_proration_date\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    tax\n    \n as \n    \n    tax\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    threshold_reason_amount_gte\n    \n as \n    \n    threshold_reason_amount_gte\n    \n, \n    \n    \n    total\n    \n as \n    \n    total\n    \n, \n    \n    \n    webhooks_delivered_at\n    \n as \n    \n    webhooks_delivered_at\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        default_payment_method_id,\n        payment_intent_id,\n        subscription_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        post_payment_credit_notes_amount,\n        pre_payment_credit_notes_amount,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total,\n        period_start,\n        period_end,\n        cast(status_transitions_finalized_at as timestamp) as status_transitions_finalized_at,\n        cast(status_transitions_marked_uncollectible_at as timestamp) as status_transitions_marked_uncollectible_at,\n        cast(status_transitions_paid_at as timestamp) as status_transitions_paid_at,\n        cast(status_transitions_voided_at as timestamp) as status_transitions_voided_at,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    and not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:50.366342Z", "completed_at": "2024-08-13T16:41:50.796795Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:50.797893Z", "completed_at": "2024-08-13T16:41:50.797897Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.43398308753967285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_line_item", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discountable\n    \n as \n    \n    discountable\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_item_id\n    \n as \n    \n    invoice_item_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    price_id\n    \n as \n    \n    price_id\n    \n, \n    \n    \n    proration\n    \n as \n    \n    proration\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    subscription_item_id\n    \n as \n    \n    subscription_item_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unique_id\n    \n as \n    \n    unique_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        invoice_item_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        price_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id as unique_invoice_line_item_id,\n        period_start,\n        period_end,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n\n    \n    and id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    \n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:50.808674Z", "completed_at": "2024-08-13T16:41:51.171878Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:51.172372Z", "completed_at": "2024-08-13T16:41:51.172377Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.37210702896118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_card", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    wallet_type\n    \n as \n    \n    wallet_type\n    \n, \n    \n    \n    three_d_secure_authentication_flow\n    \n as \n    \n    three_d_secure_authentication_flow\n    \n, \n    \n    \n    three_d_secure_result\n    \n as \n    \n    three_d_secure_result\n    \n, \n    \n    \n    three_d_secure_result_reason\n    \n as \n    \n    three_d_secure_result_reason\n    \n, \n    \n    \n    three_d_secure_version\n    \n as \n    \n    three_d_secure_version\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding,\n        charge_id,\n        type,\n        wallet_type,\n        three_d_secure_authentication_flow,\n        three_d_secure_result,\n        three_d_secure_result_reason,\n        three_d_secure_version,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:50.803539Z", "completed_at": "2024-08-13T16:41:51.256571Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:51.259869Z", "completed_at": "2024-08-13T16:41:51.260214Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4608020782470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_intent", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_capturable\n    \n as \n    \n    amount_capturable\n    \n, \n    \n    \n    amount_received\n    \n as \n    \n    amount_received\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    capture_method\n    \n as \n    \n    capture_method\n    \n, \n    \n    \n    confirmation_method\n    \n as \n    \n    confirmation_method\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_payment_error_charge_id\n    \n as \n    \n    last_payment_error_charge_id\n    \n, \n    \n    \n    last_payment_error_code\n    \n as \n    \n    last_payment_error_code\n    \n, \n    \n    \n    last_payment_error_decline_code\n    \n as \n    \n    last_payment_error_decline_code\n    \n, \n    \n    \n    last_payment_error_doc_url\n    \n as \n    \n    last_payment_error_doc_url\n    \n, \n    \n    \n    last_payment_error_message\n    \n as \n    \n    last_payment_error_message\n    \n, \n    \n    \n    last_payment_error_param\n    \n as \n    \n    last_payment_error_param\n    \n, \n    \n    \n    last_payment_error_source_id\n    \n as \n    \n    last_payment_error_source_id\n    \n, \n    \n    \n    last_payment_error_type\n    \n as \n    \n    last_payment_error_type\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        cast(canceled_at as timestamp) as canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:51.192046Z", "completed_at": "2024-08-13T16:41:51.691485Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:51.693877Z", "completed_at": "2024-08-13T16:41:51.693898Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5041899681091309, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    arrival_date\n    \n as \n    \n    arrival_date\n    \n, \n    \n    \n    automatic\n    \n as \n    \n    automatic\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination_bank_account_id\n    \n as \n    \n    destination_bank_account_id\n    \n, \n    \n    \n    destination_card_id\n    \n as \n    \n    destination_card_id\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    method\n    \n as \n    \n    method\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        cast(arrival_date as timestamp) as arrival_date_at,\n        automatic as is_automatic,\n        balance_transaction_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        destination_bank_account_id,\n        destination_card_id,\n        metadata,\n        method,\n        source_type,\n        status,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:51.271488Z", "completed_at": "2024-08-13T16:41:51.692418Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:51.694337Z", "completed_at": "2024-08-13T16:41:51.694342Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4295690059661865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    billing_detail_address_city\n    \n as \n    \n    billing_detail_address_city\n    \n, \n    \n    \n    billing_detail_address_country\n    \n as \n    \n    billing_detail_address_country\n    \n, \n    \n    \n    billing_detail_address_line_1\n    \n as \n    \n    billing_detail_address_line_1\n    \n, \n    \n    \n    billing_detail_address_line_2\n    \n as \n    \n    billing_detail_address_line_2\n    \n, \n    \n    \n    billing_detail_address_postal_code\n    \n as \n    \n    billing_detail_address_postal_code\n    \n, \n    \n    \n    billing_detail_address_state\n    \n as \n    \n    billing_detail_address_state\n    \n, \n    \n    \n    billing_detail_email\n    \n as \n    \n    billing_detail_email\n    \n, \n    \n    \n    billing_detail_name\n    \n as \n    \n    billing_detail_name\n    \n, \n    \n    \n    billing_detail_phone\n    \n as \n    \n    billing_detail_phone\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        metadata,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:51.716540Z", "completed_at": "2024-08-13T16:41:52.200593Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.202674Z", "completed_at": "2024-08-13T16:41:52.202683Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5011169910430908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__refund", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_reason\n    \n as \n    \n    failure_reason\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        payment_intent_id,\n        balance_transaction_id,\n        charge_id,\n        amount,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:51.704066Z", "completed_at": "2024-08-13T16:41:52.245101Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.249317Z", "completed_at": "2024-08-13T16:41:52.249324Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5503838062286377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__product", "compiled": true, "compiled_code": "\n\nwith product as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__product_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    fivetran_synced\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    active\n    \n as is_active , \n    cast(null as string) as \n    \n    attributes\n    \n , \n    \n    \n    caption\n    \n as \n    \n    caption\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    cast(null as timestamp) as \n    \n    deactivate_on\n    \n , \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as string) as \n    \n    images\n    \n , \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    shippable\n    \n as \n    \n    shippable\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_label\n    \n as \n    \n    unit_label\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from product\n),\n\nfinal as (\n\n    select \n        id as product_id,\n        is_active, -- renamed in macro get_product_columns, source column name: active\n        attributes,\n        caption,\n        cast(created as timestamp) as created_at,\n        cast(deactivate_on as timestamp) as deactivate_at,\n        description,\n        images,\n        is_deleted,\n        name,\n        shippable,\n        statement_descriptor,\n        type,\n        unit_label,\n        updated,\n        url,\n        source_relation\n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__product`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.254938Z", "completed_at": "2024-08-13T16:41:52.269780Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.271577Z", "completed_at": "2024-08-13T16:41:52.271584Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019764184951782227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation.822bb93896", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account`\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.274912Z", "completed_at": "2024-08-13T16:41:52.290539Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.290959Z", "completed_at": "2024-08-13T16:41:52.290964Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017816781997680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__account_account_id.374858379a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__account`\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.294595Z", "completed_at": "2024-08-13T16:41:52.300126Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.300523Z", "completed_at": "2024-08-13T16:41:52.300529Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008783817291259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation.6e04594797", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        card_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card`\n    group by card_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.306478Z", "completed_at": "2024-08-13T16:41:52.318914Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.319847Z", "completed_at": "2024-08-13T16:41:52.319851Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015956878662109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect card_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__card`\nwhere card_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.321604Z", "completed_at": "2024-08-13T16:41:52.325357Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.325757Z", "completed_at": "2024-08-13T16:41:52.325762Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005852699279785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation.4616b292a1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge`\n    group by charge_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.331054Z", "completed_at": "2024-08-13T16:41:52.336810Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.337322Z", "completed_at": "2024-08-13T16:41:52.337327Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009827136993408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__charge`\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.338767Z", "completed_at": "2024-08-13T16:41:52.343232Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.343783Z", "completed_at": "2024-08-13T16:41:52.343789Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005942821502685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation.e83fa67eba", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.345332Z", "completed_at": "2024-08-13T16:41:52.348876Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.349298Z", "completed_at": "2024-08-13T16:41:52.349302Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0049779415130615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__balance_transaction`\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.351293Z", "completed_at": "2024-08-13T16:41:52.355547Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.356076Z", "completed_at": "2024-08-13T16:41:52.356082Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006217002868652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation.3fa0f43271", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.357752Z", "completed_at": "2024-08-13T16:41:52.362635Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.363364Z", "completed_at": "2024-08-13T16:41:52.363369Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006466865539550781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__customer`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.365227Z", "completed_at": "2024-08-13T16:41:52.368595Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.368991Z", "completed_at": "2024-08-13T16:41:52.368996Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004856109619140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation.3fe3205476", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        dispute_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__dispute`\n    group by dispute_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.370271Z", "completed_at": "2024-08-13T16:41:52.374710Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.375353Z", "completed_at": "2024-08-13T16:41:52.375359Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006018877029418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation.d2b1cfff07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, index, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__fee`\n    group by balance_transaction_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.377537Z", "completed_at": "2024-08-13T16:41:52.382259Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.383207Z", "completed_at": "2024-08-13T16:41:52.383214Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007638692855834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__fee_balance_transaction_id.725d4ac005", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__fee`\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.385200Z", "completed_at": "2024-08-13T16:41:52.392452Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.394602Z", "completed_at": "2024-08-13T16:41:52.394609Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010482072830200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__discount_discount_id__type__type_id__source_relation.d9b54c55ae", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_id, type, type_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__discount`\n    group by discount_id, type, type_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.396182Z", "completed_at": "2024-08-13T16:41:52.399924Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.400318Z", "completed_at": "2024-08-13T16:41:52.400323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004996061325073242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation.f632654e72", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice`\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.401744Z", "completed_at": "2024-08-13T16:41:52.405647Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.406073Z", "completed_at": "2024-08-13T16:41:52.406077Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00532984733581543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation.d2ff4b8aed", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_line_item_id, invoice_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item`\n    group by invoice_line_item_id, invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.408139Z", "completed_at": "2024-08-13T16:41:52.412474Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.413385Z", "completed_at": "2024-08-13T16:41:52.413392Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006929159164428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice`\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.415449Z", "completed_at": "2024-08-13T16:41:52.418866Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.419303Z", "completed_at": "2024-08-13T16:41:52.419309Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004723787307739258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_line_item_invoice_line_item_id.5b9c83b5f3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_line_item_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__invoice_line_item`\nwhere invoice_line_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.420859Z", "completed_at": "2024-08-13T16:41:52.425328Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.426515Z", "completed_at": "2024-08-13T16:41:52.426520Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006714820861816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation.fe1f48acd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card`\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.428095Z", "completed_at": "2024-08-13T16:41:52.433139Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.433630Z", "completed_at": "2024-08-13T16:41:52.433635Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0063629150390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_card_payment_method_id.f246b11438", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method_card`\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.435065Z", "completed_at": "2024-08-13T16:41:52.437658Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.438415Z", "completed_at": "2024-08-13T16:41:52.438422Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004456043243408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation.046730da02", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_intent_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent`\n    group by payment_intent_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.440212Z", "completed_at": "2024-08-13T16:41:52.446983Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.447702Z", "completed_at": "2024-08-13T16:41:52.447707Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008513212203979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_intent_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_intent`\nwhere payment_intent_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.450348Z", "completed_at": "2024-08-13T16:41:52.458361Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.459599Z", "completed_at": "2024-08-13T16:41:52.459609Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012851953506469727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation.f9897a29ec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payout_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout`\n    group by payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.465192Z", "completed_at": "2024-08-13T16:41:52.470345Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.470864Z", "completed_at": "2024-08-13T16:41:52.470878Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0075550079345703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payout_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payout`\nwhere payout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.473097Z", "completed_at": "2024-08-13T16:41:52.479044Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.480147Z", "completed_at": "2024-08-13T16:41:52.480158Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008415937423706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation.02a8143517", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method`\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.482404Z", "completed_at": "2024-08-13T16:41:52.486326Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.487061Z", "completed_at": "2024-08-13T16:41:52.487067Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0055501461029052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__payment_method`\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.489037Z", "completed_at": "2024-08-13T16:41:52.495655Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.499230Z", "completed_at": "2024-08-13T16:41:52.499237Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011818170547485352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation.93aa6111ec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund`\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.501081Z", "completed_at": "2024-08-13T16:41:52.507696Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.508432Z", "completed_at": "2024-08-13T16:41:52.508437Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008620738983154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__refund`\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.510016Z", "completed_at": "2024-08-13T16:41:52.513320Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.513718Z", "completed_at": "2024-08-13T16:41:52.513723Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00464177131652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__product_product_id__source_relation.cfe44d459e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__product`\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.220078Z", "completed_at": "2024-08-13T16:41:52.677192Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.677649Z", "completed_at": "2024-08-13T16:41:52.677657Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.47351503372192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__transfer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__transfer_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_reversed\n    \n as \n    \n    amount_reversed\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    destination_payment\n    \n as \n    \n    destination_payment\n    \n, \n    \n    \n    destination_payment_id\n    \n as \n    \n    destination_payment_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reversed\n    \n as \n    \n    reversed\n    \n, \n    \n    \n    source_transaction\n    \n as \n    \n    source_transaction\n    \n, \n    \n    \n    source_transaction_id\n    \n as \n    \n    source_transaction_id\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as transfer_id,\n        amount as transfer_amount,\n        amount_reversed as transfer_amount_reversed,\n        balance_transaction_id,\n        cast(created as timestamp) as transfer_created_at,\n        currency as transfer_currency,\n        description as transfer_description,\n        destination as transfer_destination,\n        destination_payment,\n        destination_payment_id,\n        metadata as transfer_metadata,\n        reversed as transfer_is_reversed,\n        source_transaction,\n        source_transaction_id,\n        source_type,\n        transfer_group,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__transfer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:52.679796Z", "completed_at": "2024-08-13T16:41:52.682856Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:52.683362Z", "completed_at": "2024-08-13T16:41:52.683368Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005042076110839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation.ade160ba67", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__transfer`\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:48.453991Z", "completed_at": "2024-08-13T16:41:55.396132Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:55.396725Z", "completed_at": "2024-08-13T16:41:55.396763Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 6.944643259048462, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__subscription_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`subscription_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:48.097676Z", "completed_at": "2024-08-13T16:41:56.682219Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:56.682688Z", "completed_at": "2024-08-13T16:41:56.682707Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 8.586274147033691, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__price_plan_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `private-internal`.`stripe`.`price`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__price_plan_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:55.398519Z", "completed_at": "2024-08-13T16:41:58.809227Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:58.809756Z", "completed_at": "2024-08-13T16:41:58.809761Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.412065029144287, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__subscription", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_active\n    \n as \n    \n    _fivetran_active\n    \n, \n    \n    \n    application_fee_percent\n    \n as \n    \n    application_fee_percent\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_cycle_anchor\n    \n as \n    \n    billing_cycle_anchor\n    \n, \n    \n    \n    billing_threshold_amount_gte\n    \n as \n    \n    billing_threshold_amount_gte\n    \n, \n    \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n as \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n, \n    \n    \n    cancel_at\n    \n as \n    \n    cancel_at\n    \n, \n    \n    \n    cancel_at_period_end\n    \n as \n    \n    cancel_at_period_end\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    current_period_end\n    \n as \n    \n    current_period_end\n    \n, \n    \n    \n    current_period_start\n    \n as \n    \n    current_period_start\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    days_until_due\n    \n as \n    \n    days_until_due\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latest_invoice_id\n    \n as \n    \n    latest_invoice_id\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    pending_setup_intent_id\n    \n as \n    \n    pending_setup_intent_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    trial_end\n    \n as \n    \n    trial_end\n    \n, \n    \n    \n    trial_start\n    \n as \n    \n    trial_start\n    \n, \n    \n    \n    pause_collection_behavior\n    \n as \n    \n    pause_collection_behavior\n    \n, \n    \n    \n    pause_collection_resumes_at\n    \n as \n    \n    pause_collection_resumes_at\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        latest_invoice_id,\n        customer_id,\n        default_payment_method_id,\n        pending_setup_intent_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cast(cancel_at as timestamp) as cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        cast(canceled_at as timestamp) as canceled_at,\n        cast(created as timestamp) as created_at,\n        current_period_start,\n        current_period_end,\n        days_until_due,\n        metadata,\n        cast(start_date as timestamp) as start_date_at,\n        cast(ended_at as timestamp) as ended_at,\n        pause_collection_behavior,\n        cast(pause_collection_resumes_at as timestamp) as pause_collection_resumes_at,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    \n        and coalesce(_fivetran_active, true)\n    \n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:58.814460Z", "completed_at": "2024-08-13T16:41:58.816610Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:58.817400Z", "completed_at": "2024-08-13T16:41:58.817404Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006788969039916992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__subscription_subscription_id.b242b1f7bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription`\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:58.811715Z", "completed_at": "2024-08-13T16:41:58.816862Z"}, {"name": "execute", "started_at": "2024-08-13T16:41:58.817575Z", "completed_at": "2024-08-13T16:41:58.817578Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00745391845703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation.1b87d4205c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__subscription`\n    group by subscription_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:41:56.684345Z", "completed_at": "2024-08-13T16:42:00.862332Z"}, {"name": "execute", "started_at": "2024-08-13T16:42:00.862951Z", "completed_at": "2024-08-13T16:42:00.862961Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 4.179692029953003, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__price_plan", "compiled": true, "compiled_code": "\n\nwith price_plan as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__price_plan_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as is_active , \n    \n    \n    billing_scheme\n    \n as \n    \n    billing_scheme\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    nickname\n    \n as \n    \n    nickname\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    recurring_aggregate_usage\n    \n as \n    \n    recurring_aggregate_usage\n    \n, \n    \n    \n    recurring_interval\n    \n as \n    \n    recurring_interval\n    \n, \n    \n    \n    recurring_interval_count\n    \n as \n    \n    recurring_interval_count\n    \n, \n    \n    \n    recurring_usage_type\n    \n as \n    \n    recurring_usage_type\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    unit_amount_decimal\n    \n as \n    \n    unit_amount_decimal\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from price_plan\n),\n\nfinal as (\n\n    select \n        id as price_plan_id,\n        is_active,\n        unit_amount,\n        currency,\n        recurring_interval,\n        recurring_interval_count,\n        recurring_usage_type,\n        recurring_aggregate_usage,\n        metadata,\n        nickname,\n        product_id,\n        billing_scheme,\n        cast(created as timestamp) as created_at,\n        is_deleted,\n        source_relation\n\n        \n        \n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__price_plan`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T16:42:00.866086Z", "completed_at": "2024-08-13T16:42:00.870849Z"}, {"name": "execute", "started_at": "2024-08-13T16:42:00.871335Z", "completed_at": "2024-08-13T16:42:00.871342Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0065059661865234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation.3d189cd99d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_plan_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_stripe`.`stg_stripe__price_plan`\n    group by price_plan_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 15.170109033584595, "args": {"show_resource_report": false, "partial_parse_file_diff": true, "defer": false, "log_level_file": "debug", "invocation_command": "dbt docs generate", "partial_parse": true, "warn_error_options": {"include": [], "exclude": []}, "printer_width": 80, "send_anonymous_usage_stats": true, "profiles_dir": "/Users/renee/.dbt", "favor_state": false, "populate_cache": true, "log_path": "/Users/renee/Documents/dbt/stripe/develop/logs", "strict_mode": false, "empty_catalog": false, "print": true, "static": false, "macro_debugging": false, "use_colors": true, "write_json": true, "static_parser": true, "log_format_file": "debug", "select": [], "log_level": "info", "quiet": false, "cache_selected_only": false, "project_dir": "/Users/renee/Documents/dbt/stripe/develop", "log_file_max_bytes": 10485760, "enable_legacy_logger": false, "exclude": [], "use_colors_file": true, "which": "generate", "compile": true, "log_format": "default", "indirect_selection": "eager", "vars": {}, "introspect": true, "version_check": true}}